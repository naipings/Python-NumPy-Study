# 广播
'''
广播(broadcasting) 指的是不同形状的数组之间的算术运算的执行方式。
它是一种非常强大的功能，但也容易令人误解，即使是经验丰富的老手也是如此。
将标量值跟数组合并时就会发生最简单的广播：
'''
import numpy as np
arr = np.arange(5)
print(arr)
# [0 1 2 3 4]

print(arr * 4)
# [ 0  4  8 12 16]
# 这里我们说：在这个乘法运算中，标量值 4 被广播到了其他所有的元素上。


'''
看一个例子，我们可以通过减去列平均值的方式对数组的每一列进行距平化处理。
这个问题解决起来非常简单：
'''
arr = np.random.randn(4, 3)
print(arr)
'''
[[-0.64957241  0.0302564   0.0891033 ]
 [ 0.22478467  0.57840849  0.2966187 ]
 [ 0.86163314 -0.81310006  0.28317052]
 [-0.70971685  1.52921774 -0.16408586]]
'''

print(arr.mean(0))
# [-0.06821786  0.33119564  0.12620166]

demeaned = arr - arr.mean(0)
print(demeaned)
'''
[[-0.58135455 -0.30093924 -0.03709837]
 [ 0.29300253  0.24721285  0.17041704]
 [ 0.929851   -1.1442957   0.15696885]
 [-0.64149899  1.1980221  -0.29028752]]
'''

print(demeaned.mean(0))
# [-2.77555756e-17  0.00000000e+00  1.38777878e-17]


# 图10形象地展示了该过程。用广播的方式对行进行距平化处理会稍微麻烦一些。
# 幸运的是，只要遵循一定的规则，低维度的值是可以被广播到数组的任意维度的（比如对二维数组各列减去行平均值）


'''
思考广播的原则。再来看一下最后那个例子，假设你希望对各行减去那个平均值。
由于 arr.mean(0) 的长度为 3, 所以它可以在 0 轴向上进行广播：(因为 arr 的后缘维度是 3, 所以它们是兼容的)。
根据该原则，要在 1 轴向上做减法（即各行减去行平均值），较小的那个数组的形状必须是 (4,1) :
'''
print(arr)
'''
[[-2.47967182  0.2275477   1.37582929]
 [-1.84224853  0.07808662  0.30428763]
 [ 1.53651809  0.84257584 -0.27115177]
 [-0.11159443 -0.48126041  0.57097301]]
'''

row_means = arr.mean(1)
print(row_means)
# [-0.29209828 -0.48662476  0.70264739 -0.00729394]

print(row_means.shape)
# (4,)

print(row_means.reshape((4, 1)))
'''
[[-0.29209828]
 [-0.48662476]
 [ 0.70264739]
 [-0.00729394]]
'''

demeaned = arr - row_means.reshape((4, 1))
print(demeaned)
'''
[[-2.18757354  0.51964598  1.66792756]
 [-1.35562377  0.56471138  0.79091239]
 [ 0.8338707   0.13992845 -0.97379915]
 [-0.10430049 -0.47396647  0.57826695]]
'''

print(demeaned.mean(1))
# [7.40148683e-17 0.00000000e+00 0.00000000e+00 0.00000000e+00]

# 图12说明了该运算的过程。

# 同时，图13展示了另外一种情况，这次是在一个三维数组上沿0轴方向加上一个二维数组。 三维数组在轴0上的广播 。