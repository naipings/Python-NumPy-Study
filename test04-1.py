# 切片操作(重点!!!)
'''
一维数组切片
对于一维数组来说，它类似于一条直线，其上的坐标位置用一个数字就可以表示。
例如，对于一个长度为 5 的一维数组 arr = [1, 2, 3, 4, 5], 我们可以用数字 0 到 4 来表示它的每一个位置。
当我们使用切片操作时，就可以通过指定起始位置和结束位置来获取数组中的一部分元素。
例如，如果我们想要获取从索引 1 到索引 3 的元素，可以使用切片操作 arr[1:4]，结果为 [2, 3, 4]。
需要注意的是，切片操作是左闭右开的，即包括起始位置，但不包括结束位置。
'''
import numpy as np
arr = np.array([1,2,3,4,5])
print(arr[1:4])
# [2 3 4]


# 多维数组切片
# 多维数组单纯讲不太好讲，我们以实操来进行讲解，可以参考如下例子：
# (1)我先创建了一个3维数组，其形状为 shape=(2,3,5) :
data = np.arange(1, 31).reshape(2,3,5)
print(data)
'''
[[[ 1  2  3  4  5]
  [ 6  7  8  9 10]
  [11 12 13 14 15]]

 [[16 17 18 19 20]
  [21 22 23 24 25]
  [26 27 28 29 30]]]
'''

# (2)行切片：
# 假设我们现在只想取前面两行，那我们应该怎么做呢？
# 思路：(2-1) 我们先取第一维数据(看看)
print(data[0:1])
'''
[[[ 1  2  3  4  5]
  [ 6  7  8  9 10]
  [11 12 13 14 15]]]
'''

# (2-2) 现在它现在是不是就被分解成一个 2 维数组，我们再对这个 2 维数组进行操作，要想取这个 2 维数组前面两行，代码是啥呢？
# 是不是就是 data[0:2]，那我们结合第一步的代码，应该怎么做呢？
print(data[0:1,0:2])
'''
[[[ 1  2  3  4  5]
  [ 6  7  8  9 10]]]
'''
# 这样就取到了这个 3 维数组最前面的两行了。方法其实就是进行分解操作就行，一维一维的进行分解。


# (3)列切片
# (3-1) 还是以这个数组进行列切片操作
print(data[:,])
'''
[[[ 1  2  3  4  5]
  [ 6  7  8  9 10]
  [11 12 13 14 15]]

 [[16 17 18 19 20]
  [21 22 23 24 25]
  [26 27 28 29 30]]]
'''
'''
可能这个操作小伙伴有些就看不懂了，啥意思呢？
还是一句话，一维一维的进行分解，因为我们要取的是列，所有全部的行我们就应该都算进去。
换句话来说，忽略行的影响，代码就是 data[:,]
'''

# (3-2) 再来取第2维
# 代码还是data[:]结合起来就是：
print(data[:,:])
'''
[[[ 1  2  3  4  5]
  [ 6  7  8  9 10]
  [11 12 13 14 15]]

 [[16 17 18 19 20]
  [21 22 23 24 25]
  [26 27 28 29 30]]]
'''

# (3-3) 我们再来取最后一维：
print(data[:,:,0:2])
'''
[[[ 1  2]
  [ 6  7]
  [11 12]]

 [[16 17]
  [21 22]
  [26 27]]]
'''
# 至此，列取片也完成。

"""
总结：不管是列取片，还是行取片，你都一维一维的去进行拆分，一维一维的去切片就好了。
"""