# 布尔型索引
'''
来看这样一个例子，假设我们有一个用于存储数据的数组以及一个存储姓名的数组（含有重复项）。
在这里，我将使用 numpy.random 中的 randn 函数生成一些正态分布的随机数据：
'''
import numpy as np
names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
print(names)
'''
['Bob' 'Joe' 'Will' 'Bob' 'Will' 'Joe' 'Joe']
'''

data = np.random.normal(size=(len(names),4))
print(data)
'''
[[-0.63573614  0.42682765  0.25649131 -0.70786804]
 [ 0.34661823 -0.05563104  1.32033867  0.58258371]
 [-1.60708194 -1.1740316   0.42309777  0.31075686]
 [-0.33664906 -0.45304577  1.33048094 -1.25757839]
 [-0.22040781 -0.03084011  1.95093502 -0.98113792]
 [ 1.01989614  0.39704227  0.09930698 -0.81950156]
 [-1.527714   -0.75687599 -0.72432296 -1.73861881]]
'''

'''
假设每个名字都对应 data 数组中的一行，而我们想要选出对应于名字"Bob"的所有行。
跟算术运算一样，数组的比较运算(如==) 也是矢量化的。
因此，对 names 和字符串"Bob"的比较运算将会产生一个布尔型数组：
'''
print(names == 'Bob')
'''
[ True False False  True False False False]
'''

# 这个布尔型数组可用于数组索引：
print(data[names == 'Bob']) # 实际上选的是第1行和第4行的筛选
'''
[[-0.63573614  0.42682765  0.25649131 -0.70786804]
 [-0.33664906 -0.45304577  1.33048094 -1.25757839]]
'''

# 如果布尔型数组的长度不对，布尔型选择就会出错，因此一定要小心。
# 下面的例子，我选取了names == 'Bob'的行，并索引了列：
print(data[names == 'Bob', 2:])
'''
[[ 0.25649131 -0.70786804]
 [ 1.33048094 -1.25757839]]
'''

# 要选择除"Bob"以外的其他值，既可以使用不等于符号（!=），也可以通过~对条件进行否定：
print(names != 'Bob')
'''
[False  True  True False  True  True  True]
'''

print(data[~(names == 'Bob')])
'''
[[ 0.34661823 -0.05563104  1.32033867  0.58258371]
 [-1.60708194 -1.1740316   0.42309777  0.31075686]
 [-0.22040781 -0.03084011  1.95093502 -0.98113792]
 [ 1.01989614  0.39704227  0.09930698 -0.81950156]
 [-1.527714   -0.75687599 -0.72432296 -1.73861881]]
'''


# 使用布尔类型数组设置值是一种经常用到的手段:
import numpy as np

ndarray1 = np.arange(5)
ndarray1 = ndarray1 + 1
print(ndarray1)
'''
[1 2 3 4 5]
'''

ndarray2 = np.arange(16).reshape((4, 4))
print(ndarray2)
'''
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]
 [12 13 14 15]]
'''

names = np.array(['aaa', 'bbb', 'ccc', 'ddd'])
print(names)
'''
['aaa' 'bbb' 'ccc' 'ddd']
'''

# 将数组ndarray1中所有大于2的元素设置成8
ndarray1[ndarray1 > 2] = 8
print(ndarray1)
'''
[1 2 8 8 8]
'''

# 将ndarray2的aaa这一行所有的元素设置为0
ndarray2[names == 'aaa'] = 0
# 将ndarray2的bbb这一行2位置往后所有的元素设置为1
ndarray2[names == 'bbb', 2:] = 666
print(ndarray2)
'''
[[  0   0   0   0]
 [  4   5 666 666]
 [  8   9  10  11]
 [ 12  13  14  15]]
'''

# 将ndarray2的ccc ddd这2行所有的元素设置为999
ndarray2[(names == 'ccc') | (names == 'ddd')] = 999
print(ndarray2)
'''
[[  0   0   0   0]
 [  4   5 666 666]
 [999 999 999 999]
 [999 999 999 999]]
'''